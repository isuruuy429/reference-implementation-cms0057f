// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/http;
import ballerina/log;
import ballerina/time;
import ballerinax/health.clients.fhir;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhirr4;
import ballerinax/health.fhir.r4.carinbb200;
import ballerinax/health.fhir.r4.davincidtr210;
import ballerinax/health.fhir.r4.davincihrex100;
import ballerinax/health.fhir.r4.davincipas;
import ballerinax/health.fhir.r4.international401;
import ballerinax/health.fhir.r4.uscore501;
import ballerina/uuid;

configurable Configs configs = ?;
configurable string exportServiceUrl = ?;

// This is used to connect to file service
isolated http:Client exportServiceClient = check new (exportServiceUrl);

// ######################################################################################################################
// # Capability statement API                                                                                           #
// ###################################################################################################################### 

# # The service representing capability statement API
final readonly & international401:CapabilityStatement capabilityStatement = check generateCapabilityStatement().cloneReadOnly();

# The service representing well known API
# Bound to port defined by configs

listener http:Listener httpListener = http:getDefaultListener();

service http:InterceptableService /fhir/r4/metadata on httpListener {

    public function createInterceptors() returns [fhirr4:FHIRResponseErrorInterceptor] {
        return [new fhirr4:FHIRResponseErrorInterceptor()];
    }

    # The capability statement is a key part of the overall conformance framework in FHIR. It is used as a statement of the
    # features of actual software, or of a set of rules for an application to provide. This statement connects to all the
    # detailed statements of functionality, such as StructureDefinitions and ValueSets. This composite statement of application
    # capability may be used for system compatibility testing, code generation, or as the basis for a conformance assessment.
    # For further information https://hl7.org/fhir/capabilitystatement.html
    # + return - capability statement as a json
    isolated resource function get .() returns @http:Payload {mediaType: [r4:FHIR_MIME_TYPE_JSON, r4:FHIR_MIME_TYPE_XML]} json|r4:FHIRError {
        json|error response = capabilityStatement.toJson();
        if (response is json) {
            log:printDebug("Capability statement served at " + time:utcNow()[0].toString());
            return response;
        } else {
            return r4:createFHIRError(response.message(), r4:FATAL, r4:TRANSIENT_EXCEPTION, response.detail().toString(), cause = response);
        }
    }
}

# # The service representing well known API
final readonly & SmartConfiguration smartConfiguration = check generateSmartConfiguration().cloneReadOnly();

service http:InterceptableService /fhir/r4/\.well\-known/smart\-configuration on httpListener {

    public function createInterceptors() returns [fhirr4:FHIRResponseErrorInterceptor] {
        return [new fhirr4:FHIRResponseErrorInterceptor()];
    }

    # The authorization endpoints accepted by a FHIR resource server are exposed as a Well-Known Uniform Resource Identifiers (URIs) (RFC5785) JSON document.
    # Reference: https://build.fhir.org/ig/HL7/smart-app-launch/conformance.html#using-well-known
    # + return - Smart configuration
    resource isolated function get .() returns json|r4:FHIRError {
        json|error response = smartConfiguration.toJson();

        if response is json {
            log:printDebug("Smart configuration served at " + time:utcNow()[0].toString());
            return response;
        } else {
            return r4:createFHIRError(response.message(), r4:FATAL, r4:TRANSIENT_EXCEPTION, response.detail().toString(), cause = response);
        }
    }
}

// ######################################################################################################################
// # Patient API                                                                                                        #
// ###################################################################################################################### 

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type Patient r4:Patient|<other_Patient_Profile>;
public type Patient uscore501:USCorePatientProfile|international401:Patient;

final DemoFHIRMemberMatcher fhirMemberMatcher = new;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service /fhir/r4/Patient on new fhirr4:Listener(config = patientApiConfig) {

    //Member Match implementation
    isolated resource function post \$member\-match(r4:FHIRContext context,
            davincihrex100:HRexMemberMatchRequestParameters parameters)
            returns davincihrex100:HRexMemberMatchResponseParameters|r4:FHIRError {
        // Validate and extract resources from the request parameters
        davincihrex100:MemberMatchResources memberMatchResources =
                check validateAndExtractMemberMatchResources(parameters);

        log:printDebug("Member Matcher invoked");
        // Match member
        davincihrex100:MemberIdentifier memberIdentifier = check fhirMemberMatcher.matchMember(memberMatchResources);

        // Member match response profile: 
        // https://hl7.org/fhir/us/davinci-hrex/StructureDefinition-hrex-parameters-member-match-out.html
        return {
            'parameter: {
                name: "MemberIdentifier",
                valueIdentifier: {
                    'type: {
                        coding: [
                            {
                                system: "http://terminology.hl7.org/3.1.0/CodeSystem-v2-0203.html",
                                code: "MB"
                            }
                        ]
                    },
                    value: memberIdentifier
                }
            }
        };
    }

    // Implementation of the $export operation
    isolated resource function post \$export(r4:FHIRContext fhirContext, international401:Parameters parameters) returns r4:FHIRError|r4:OperationOutcome|error {

        lock {
            r4:FHIRError|r4:OperationOutcome|error response = check exportServiceClient->/.post(parameters.clone());
            return response.clone();
        }

    }

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:FHIRError|r4:DomainResource|error {
        return getById(PATIENT, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Patient|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:FHIRError|error|r4:Bundle {
        return search(PATIENT, getQueryParamsMap(fhirContext.getRequestSearchParameters()));
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Patient patient) returns r4:DomainResource|error {
        return create(PATIENT, patient.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Patient patient) returns Patient|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Patient|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:FHIRError|fhir:FHIRResponse {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Claim API                                                                                                          #
// ###################################################################################################################### 

public type Claim davincipas:PASClaim;

public type Parameters international401:Parameters;

service /fhir/r4/Claim on new fhirr4:Listener(config = ClaimApiConfig) {

    isolated resource function post \$submit(r4:FHIRContext fhirContext, Parameters parameters) returns error|http:Response {
        international401:Parameters submitResult = check claimSubmit(parameters);
        http:Response response = new;
        response.setJsonPayload(submitResult.toJson());
        return response;
    }

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns error|http:Response {
        r4:DomainResource claim = check getById(CLAIM, id);
        http:Response response = new;
        response.setJsonPayload(claim.toJson());
        return response;
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Claim|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns error|http:Response {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        r4:Bundle bundle = check search(CLAIM, queryParamsMap);

        http:Response response = new;
        response.setJsonPayload(bundle.toJson());
        return response;
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Claim claim) returns error|http:Response {
        r4:DomainResource createResult = check create(CLAIM, claim.toJson());
        http:Response response = new;
        response.setJsonPayload(createResult.toJson());
        return response;
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Claim claim) returns Claim|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Claim|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # ClaimResponse API                                                                                                  #
// ###################################################################################################################### 

public type ClaimResponse davincipas:PASClaimResponse;

service /fhir/r4/ClaimResponse on new fhirr4:Listener(config = claimResponseApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns http:Response|r4:OperationOutcome|r4:FHIRError|error {
        r4:DomainResource claimResponse = check getById(CLAIM_RESPONSE, id);
        http:Response response = new;
        response.setJsonPayload(claimResponse.toJson());
        response.statusCode = http:STATUS_OK;
        return response;
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns ClaimResponse|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns http:Response|r4:OperationOutcome|r4:FHIRError|error {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());

        http:Response response = new;
        r4:Bundle bundle = check search(CLAIM_RESPONSE, queryParamsMap);
        response.setJsonPayload(bundle.toJson());
        response.statusCode = http:STATUS_OK;
        return response;
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, ClaimResponse claimResponse) returns error|http:Response {
        http:Response response = new;
        r4:DomainResource result = check create(CLAIM_RESPONSE, claimResponse.toJson());
        response.setJsonPayload(result.toJson());
        response.statusCode = http:STATUS_CREATED;
        return response;
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, ClaimResponse claimresponse) returns ClaimResponse|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns ClaimResponse|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Coverage API                                                                                                       #
// ######################################################################################################################

public type Coverage international401:Coverage;

service /fhir/r4/Coverage on new fhirr4:Listener(config = coverageApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return getById(COVERAGE, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Coverage|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return search(COVERAGE, queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Coverage coverage) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return create(COVERAGE, coverage.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Coverage coverage) returns Coverage|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Coverage|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # EoB API                                                                                                            #
// ######################################################################################################################

public type ExplanationOfBenefit carinbb200:C4BBExplanationOfBenefitOutpatientInstitutional|carinbb200:C4BBExplanationOfBenefitInpatientInstitutional|carinbb200:C4BBExplanationOfBenefitPharmacy|carinbb200:C4BBExplanationOfBenefitOral|carinbb200:C4BBExplanationOfBenefitProfessionalNonClinician;

service /fhir/r4/ExplanationOfBenefit on new fhirr4:Listener(config = eobApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return getById(EXPLANATION_OF_BENEFIT, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns ExplanationOfBenefit|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return search(EXPLANATION_OF_BENEFIT, getQueryParamsMap(fhirContext.getRequestSearchParameters()));
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, ExplanationOfBenefit procedure) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return create(EXPLANATION_OF_BENEFIT, procedure.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, ExplanationOfBenefit explanationofbenefit) returns ExplanationOfBenefit|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns ExplanationOfBenefit|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # MedicationRequest API                                                                                              #
// ######################################################################################################################

public type MedicationRequest uscore501:USCoreMedicationRequestProfile;

service /fhir/r4/MedicationRequest on new fhirr4:Listener(config = medicationRequestApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return getById(MEDICATION_REQUEST, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns MedicationRequest|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return search(MEDICATION_REQUEST, queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, MedicationRequest medicationRequest) returns error|http:Response {
        r4:DomainResource createResult = check create(MEDICATION_REQUEST, medicationRequest.toJson());
        http:Response response = new;
        response.setJsonPayload(createResult.toJson());
        return response;
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, MedicationRequest medicationrequest) returns MedicationRequest|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns MedicationRequest|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Organization API                                                                                                   #
// ######################################################################################################################

public type Organization uscore501:USCoreOrganizationProfile;

service /fhir/r4/Organization on new fhirr4:Listener(config = organizationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return getById(ORGANIZATION, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Organization|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return search(ORGANIZATION, queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Organization organization) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return create(ORGANIZATION, organization.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Organization organization) returns Organization|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Organization|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Practitioner API                                                                                                   #
// ######################################################################################################################

public type Practitioner uscore501:USCorePractitionerProfile;

service /fhir/r4/Practitioner on new fhirr4:Listener(config = practitionerApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return getById(PRACTITIONER, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Practitioner|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return search(PRACTITIONER, queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Practitioner practitioner) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return create(PRACTITIONER, practitioner.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Practitioner practitioner) returns Practitioner|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Practitioner|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete fhir/r4/Practitioner/[string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get fhir/r4/Practitioner/[string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get fhir/r4/Practitioner/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Allergy Intolerance API                                                                                            #
// ######################################################################################################################

public type AllergyIntolerance uscore501:USCoreAllergyIntolerance;

service /fhir/r4/AllergyIntolerance on new fhirr4:Listener(config = allergyIntoleranceApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return getById(ALLERGY_INTOLERENCE, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns AllergyIntolerance|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return search(ALLERGY_INTOLERENCE, queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, AllergyIntolerance allergyIntolerance) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return create(ALLERGY_INTOLERENCE, allergyIntolerance.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, AllergyIntolerance allergyintolerance) returns AllergyIntolerance|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns AllergyIntolerance|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Observation API                                                                                                    #
// ######################################################################################################################

public type Observation uscore501:USCoreObservationSDOHAssessment|uscore501:USCoreLaboratoryResultObservationProfile|uscore501:USCorePediatricWeightForHeightObservationProfile|uscore501:USCorePediatricBMIforAgeObservationProfile|uscore501:USCoreBodyTemperatureProfile|uscore501:USCoreBodyHeightProfile|uscore501:USCoreObservationSurveyProfile|uscore501:USCoreHeartRateProfile|uscore501:USCoreHeadCircumferenceProfile|uscore501:USCoreRespiratoryRateProfile|uscore501:USCoreBloodPressureProfile|uscore501:USCorePulseOximetryProfile|uscore501:USCoreBodyWeightProfile|uscore501:USCoreVitalSignsProfile|uscore501:USCoreObservationSexualOrientationProfile|uscore501:USCorePediatricHeadOccipitalFrontalCircumferencePercentileProfile|uscore501:USCoreObservationImagingResultProfile|uscore501:USCoreObservationClinicalTestResultProfile|uscore501:USCoreObservationSocialHistoryProfile|uscore501:USCoreSmokingStatusProfile|uscore501:USCoreBMIProfile;

service /fhir/r4/Observation on new fhirr4:Listener(config = observationApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get fhir/r4/Observation/[string id](r4:FHIRContext fhirContext) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return getById(OBSERVATION, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get fhir/r4/Observation/[string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Observation|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get fhir/r4/Observation(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return search(OBSERVATION, queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post fhir/r4/Observation(r4:FHIRContext fhirContext, Observation observation) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return create(OBSERVATION, observation.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put fhir/r4/Observation/[string id](r4:FHIRContext fhirContext, Observation observation) returns Observation|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch fhir/r4/Observation/[string id](r4:FHIRContext fhirContext, json patch) returns Observation|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete fhir/r4/Observation/[string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get fhir/r4/Observation/[string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get fhir/r4/Observation/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Diagnostic Report API                                                                                              #
// ######################################################################################################################

public type DiagnosticReport uscore501:USCoreDiagnosticReportProfileNoteExchange|uscore501:USCoreDiagnosticReportProfileLaboratoryReporting;

service /fhir/r4/DiagnosticReport on new fhirr4:Listener(config = diagnosticReportApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return getById(DIAGNOSTIC_REPORT, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns DiagnosticReport|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return search(DIAGNOSTIC_REPORT, queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, DiagnosticReport diagnosticReport) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return create(DIAGNOSTIC_REPORT, diagnosticReport.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, DiagnosticReport diagnosticreport) returns DiagnosticReport|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns DiagnosticReport|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Encounter API                                                                                                      #
// ######################################################################################################################

public type Encounter uscore501:USCoreEncounterProfile;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service /fhir/r4/Encounter on new fhirr4:Listener(config = encounterApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return getById(ENCOUNTER, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return search(ENCOUNTER, getQueryParamsMap(fhirContext.getRequestSearchParameters()));
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Encounter procedure) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return create(ENCOUNTER, procedure.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Encounter encounter) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Questionnaire Package API                                                                                          #
// ######################################################################################################################

service /fhir/r4/Questionnaire/questionnaire\-package on new fhirr4:Listener(config = questionnairePackageApiConfig) {

    isolated resource function post .(r4:FHIRContext fhirContext, international401:Parameters parameters) returns error|http:Response {
        r4:DomainResource createResult = check getById(QUESTIONNAIRE_PACKAGE, "32");
        http:Response response = new;
        response.setJsonPayload(createResult.toJson());
        return response;
    }
}

// ######################################################################################################################
// # Questionnaire API                                                                                                  #
// ######################################################################################################################

public type Questionnaire davincidtr210:DTRStdQuestionnaire;

service /fhir/r4/Questionnaire on new fhirr4:Listener(config = questionnaireApiConfig) {

    // isolated resource function post questionnaire\-package(r4:FHIRContext fhirContext, davincidtr210:DTRQuestionnairePackageInputParameters parameters) returns error|http:Response {
    //     davincidtr210:DTRQuestionnairePackageOutputParameters createResult = check questionnairePackage(parameters);
    //     http:Response response = new;
    //     response.setJsonPayload(createResult.toJson());
    //     return response;
    // }

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return getById(QUESTIONNAIRE, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Questionnaire|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return check search(QUESTIONNAIRE, getQueryParamsMap(fhirContext.getRequestSearchParameters()));
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Questionnaire questionnaire) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return create(QUESTIONNAIRE, questionnaire.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Questionnaire questionnaire) returns Questionnaire|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Questionnaire|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # QuestionnaireResponse API                                                                                          #
// ######################################################################################################################

public type QuestionnaireResponse davincidtr210:DTRQuestionnaireResponse;

service /fhir/r4/QuestionnaireResponse on new fhirr4:Listener(config = questionnaireResponseApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return getById(QUESTIONNAIRE_RESPONSE, id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns QuestionnaireResponse|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return check search(QUESTIONNAIRE_RESPONSE, getQueryParamsMap(fhirContext.getRequestSearchParameters()));
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, QuestionnaireResponse procedure) returns r4:DomainResource|r4:OperationOutcome|r4:FHIRError {
        return create(QUESTIONNAIRE_RESPONSE, procedure.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, QuestionnaireResponse questionnaireresponse) returns QuestionnaireResponse|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns QuestionnaireResponse|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

public type Consent international401:Consent;

# In-memory storage for consent records (in production, this would be a database)
isolated map<Consent> consentStore = {};

# Constants for consent evaluation
const string CONSENT_EVALUATION_SUCCESS = "Consent evaluation successful";
const string CONSENT_EVALUATION_FAILED = "Consent evaluation failed";
const string CONSENT_NOT_FOUND = "Consent not found";
const string CONSENT_EXPIRED = "Consent has expired";
const string CONSENT_INVALID_POLICY = "Consent policy does not match payer capabilities";
const string CONSENT_INVALID_PAYER = "Payer requesting retrieval does not match consent";
const string CONSENT_INVALID_MEMBER = "Member identity does not match";

service /fhir/r4/Consent on new fhirr4:Listener(config = consentApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns Consent|r4:OperationOutcome|r4:FHIRError {
        lock {
            // Check if consent exists in the store
            if consentStore.hasKey(id) {
                return consentStore.get(id).clone();
            } else {
                return r4:createFHIRError(CONSENT_NOT_FOUND, r4:ERROR, r4:PROCESSING_NOT_FOUND, httpStatusCode = http:STATUS_NOT_FOUND);
            }
        }
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        // Extract search parameters from fhirContext
        map<r4:RequestSearchParameter[]> searchParams = fhirContext.getRequestSearchParameters();

        // Filter consents based on search parameters
        lock {
            Consent[] filteredConsents = [];
            foreach var [id, consent] in consentStore.entries() {
                Consent consentRecord = <Consent>consent;
                if matchesSearchCriteria(consentRecord, searchParams.clone()) {
                    log:printDebug("Consent matched search criteria: " + id);
                    filteredConsents.push(consentRecord);
                }
            }
            // Create bundle response
            r4:BundleEntry[] entries = [];
            foreach Consent consent in filteredConsents {
                r4:BundleEntry entry = {
                    'resource: consent,
                    // fullUrl: "urn:uuid:" + consent?.id,
                    search: {
                        mode: r4:MATCH
                    }
                };
                entries.push(entry);
            }

            r4:Bundle bundle = {
                resourceType: "Bundle",
                'type: r4:BUNDLE_TYPE_SEARCHSET,
                total: entries.length(),
                entry: entries
            };

            return bundle.clone();
        }
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Consent consent) returns Consent|r4:OperationOutcome|r4:FHIRError {
        // Validate consent
        r4:FHIRError? validationError = validateConsent(consent);
        if validationError is r4:FHIRError {
            return validationError;
        }

        // Generate unique ID if not provided
        if consent.id is () {
            consent.id = uuid:createType1AsString();
        }

        // Set creation timestamp
        consent.dateTime = time:utcNow().toString();

        lock {
            Consent|error consentCopy = consent.clone().cloneWithType();
            if consentCopy is error {
                return r4:createFHIRError("Failed to clone consent", r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_BAD_REQUEST);
            }
            // Store consent
            consentStore[<string>consent.id] = consentCopy;
        }

        log:printInfo("Consent created with ID: " + <string>consent.id);
        return consent;
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Consent consent) returns Consent|r4:OperationOutcome|r4:FHIRError {
        lock {
            if !consentStore.hasKey(id) {
                return r4:createFHIRError(CONSENT_NOT_FOUND, r4:ERROR, r4:PROCESSING_NOT_FOUND, httpStatusCode = http:STATUS_NOT_FOUND);
            }
        }

        // Validate consent
        r4:FHIRError? validationError = validateConsent(consent);
        if validationError is r4:FHIRError {
            return validationError;
        }

        // Ensure ID matches
        consent.id = id;

        // Update timestamp
        consent.dateTime = time:utcNow().toString();
        lock {

            // Store updated consent
            consentStore[<string>id] = consent.clone();
        }

        log:printInfo("Consent updated with ID: " + id);
        return consent;
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        lock {
            if !consentStore.hasKey(id) {
                return r4:createFHIRError(CONSENT_NOT_FOUND, r4:ERROR, r4:PROCESSING_NOT_FOUND, httpStatusCode = http:STATUS_NOT_FOUND);
            }
        }
        lock {

            // Remove consent
            _ = consentStore.remove(<string>id);
        }

        log:printInfo("Consent deleted with ID: " + id);

        r4:OperationOutcome outcome = {
            resourceType: "OperationOutcome",
            issue: [
                {
                    severity: r4:CODE_SEVERITY_INFORMATION,
                    code: r4:INFORMATIONAL,
                    diagnostics: "Consent successfully deleted"
                }
            ]
        };

        return outcome;
    }

    // Consent evaluation operation based on the guidelines
    isolated resource function post \$consent\-evaluate(r4:FHIRContext fhirContext, international401:Parameters parameters) returns r4:FHIRError|http:Response|error {
        // Extract consent from parameters
        Consent? consent = extractConsentFromParameters(parameters);
        if consent is () {
            return r4:createFHIRError("Consent parameter not found", r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_BAD_REQUEST);
        }

        // Evaluate consent based on guidelines
        ConsentEvaluationResult result = evaluateConsent(consent);

        if result.isValid {
            // Return success response with patient ID
            return createSuccessResponse(result);
        } else {
            // Return 422 status with operation outcome
            return createErrorResponse(result);
        }
    }
}

# Helper function to validate consent
isolated function validateConsent(Consent consent) returns r4:FHIRError? {
    // Check required fields
    if consent.patient is () {
        return r4:createFHIRError("Patient reference is required", r4:ERROR, r4:INVALID_REQUIRED, httpStatusCode = http:STATUS_BAD_REQUEST);
    }

    // Validate consent period if provided
    if consent.provision?.period is r4:Period {
        r4:Period|error period = consent.provision?.period.cloneWithType();
        if period is error {
            return r4:createFHIRError("Invalid period format", r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_BAD_REQUEST);
        }
        if period.end is r4:dateTime && period.'start is r4:dateTime {
            if period.end < period.'start {
                return r4:createFHIRError("Consent end date must be after start date", r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_BAD_REQUEST);
            }
        }
    }

    return ();
}

# Helper function to match search criteria
isolated function matchesSearchCriteria(Consent consent, map<r4:RequestSearchParameter[]> searchParams) returns boolean {
    // Implement search logic based on parameters
    // This is a simplified implementation
    if searchParams.hasKey("status") {
        r4:RequestSearchParameter[] status = searchParams.get("status");
        if consent.status.toString() != status[0].value {
            return false;
        }
    }

    if searchParams.hasKey("patient") {
        r4:RequestSearchParameter[] patient = searchParams.get("patient");
        if consent.patient?.reference != patient[0].value {
            return false;
        }
    }

    return true;
}

# Helper function to extract consent from parameters
isolated function extractConsentFromParameters(international401:Parameters parameters) returns Consent? {
    if parameters.'parameter is () {
        return ();
    }
    international401:ParametersParameter[]|error params = parameters.'parameter.cloneWithType();
    if params is error {
        return ();
    }

    foreach international401:ParametersParameter param in params {
        Consent|error consent = param.'resource.cloneWithType();
        if param.name == "Consent" && consent is Consent {
            return consent;
        }
    }

    return ();
}

# Record for consent evaluation result
public type ConsentEvaluationResult record {|
    boolean isValid;
    string? patientId;
    string? reason;
    string? memberIdentity;
    string? consentPolicy;
    r4:dateTime? consentStartDate;
    r4:dateTime? consentEndDate;
    string? requestingPayer;
|};

# Function to evaluate consent based on guidelines
isolated function evaluateConsent(Consent consent) returns ConsentEvaluationResult {
    ConsentEvaluationResult result = {
        isValid: false,
        patientId: (),
        reason: (),
        memberIdentity: (),
        consentPolicy: (),
        consentStartDate: (),
        consentEndDate: (),
        requestingPayer: ()
    };

    // Extract member identity from patient reference
    if consent.patient?.reference is string {
        result.memberIdentity = consent.patient?.reference;
    } else {
        result.reason = CONSENT_INVALID_MEMBER;
        return result;
    }

    // Check consent policy (Everything or only Non-Sensitive data)
    if consent.provision?.code is r4:CodeableConcept[] {
        result.consentPolicy = extractConsentPolicy(<r4:CodeableConcept[]>consent.provision?.code);
    }

    // Check date period for consent validity
    if consent.provision?.period is r4:Period {
        r4:Period period = <r4:Period>consent.provision?.period;
        result.consentStartDate = period.'start;
        result.consentEndDate = period.end;

        // Check if consent is still valid
        if period.end is r4:dateTime {
            r4:dateTime now = time:utcToString(time:utcNow());
            if period.end < now {
                result.reason = CONSENT_EXPIRED;
                return result;
            }
        }
    }

    // Check if requesting payer matches (simplified - in production this would check actual payer)
    // This is a placeholder for the actual payer validation logic
    result.requestingPayer = "payer2"; // Placeholder

    // For this implementation, we'll consider consent valid if all basic checks pass
    // In production, this would include more sophisticated validation
    if result.memberIdentity is string && result.consentPolicy is string {
        result.isValid = true;
        result.patientId = result.memberIdentity;
        result.reason = CONSENT_EVALUATION_SUCCESS;
    } else {
        result.reason = CONSENT_INVALID_POLICY;
    }

    return result;
}

# Helper function to extract consent policy
isolated function extractConsentPolicy(r4:CodeableConcept[] codes) returns string? {
    foreach r4:CodeableConcept code in codes {
        if code.coding is r4:Coding[] {
            foreach r4:Coding coding in <r4:Coding[]>code.coding {
                if coding.code is string {
                    return coding.code;
                }
            }
        }
    }
    return ();
}

# Function to create success response
isolated function createSuccessResponse(ConsentEvaluationResult result) returns http:Response {
    // Create operation outcome for success
    r4:OperationOutcome outcome = {
        resourceType: "OperationOutcome",
        issue: [
            {
                severity: r4:CODE_SEVERITY_INFORMATION,
                code: r4:INFORMATIONAL,
                diagnostics: result.reason
            }
        ]
    };

    // In a real implementation, this would return the patient ID
    // For now, we'll return a success response
    http:Response response = new ();
    response.setPayload(outcome);
    response.setHeader("Content-Type", "application/fhir+json");
    return response;
}

# Function to create error response
isolated function createErrorResponse(ConsentEvaluationResult result) returns http:Response {
    // Create operation outcome for error
    r4:OperationOutcome outcome = {
        resourceType: "OperationOutcome",
        issue: [
            {
                severity: r4:CODE_SEVERITY_ERROR,
                code: r4:PROCESSING_BUSINESS_RULE,
                diagnostics: result.reason
            }
        ]
    };

    http:Response response = new ();
    response.setPayload(outcome);
    response.setHeader("Content-Type", "application/fhir+json");
    response.statusCode = http:STATUS_UNPROCESSABLE_ENTITY;
    return response;
}